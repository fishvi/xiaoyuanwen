# Generated by Django 2.2.3 on 2021-05-23 11:17

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, max_length=6, null=True, verbose_name='昵称')),
                ('gender', models.CharField(blank=True, choices=[('male', '男'), ('female', '女')], max_length=10, null=True, verbose_name='性别')),
                ('picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/', verbose_name='头像')),
                ('stu_id', models.PositiveIntegerField(blank=True, null=True, unique=True, verbose_name='学号')),
                ('grade', models.CharField(blank=True, max_length=4, null=True, verbose_name='年级')),
                ('college', models.CharField(blank=True, choices=[('tx', '通信与信息工程学院'), ('jxj', '计算机科学与技术学院'), ('zdh', '自动化学院'), ('xj', '先进制造工程学院'), ('gd', '光电工程学院/重庆国际半导体学院'), ('rj', '软件工程学院'), ('sw', '生物信息学院'), ('l', '理学院'), ('jg', '经济管理学院/现代邮政学院'), ('cm', '传媒艺术学院'), ('wgy', '外国语学院'), ('gj', '国际学院'), ('af', '网络空间安全与信息法学院'), ('mks', '马克思主义学院'), ('ty', '体育学院')], max_length=20, null=True, verbose_name='学院')),
                ('location', models.CharField(blank=True, choices=[('bj', '北京'), ('tj', '天津'), ('hb1', '河北'), ('sx1', '山西'), ('nmg', '内蒙古'), ('ln', '辽宁'), ('jl', '吉林'), ('hlj', '黑龙江'), ('sh', '上海'), ('js', '江苏'), ('zj', '浙江'), ('ah', '安徽'), ('fj', '福建'), ('jx', '江西'), ('sd', '山东'), ('henan', '河南'), ('hb2', '湖北'), ('hn1', '湖南'), ('gd', '广东'), ('gx', '广西'), ('hn2', '海南'), ('cq', '重庆'), ('sc', '四川'), ('gz', '贵州'), ('yn', '云南'), ('xz', '西藏'), ('sx2', '陕西'), ('gs', '甘肃'), ('qh', '青海'), ('nx', '宁夏'), ('xj', '新疆'), ('tw', '台湾'), ('xg', '香港特别行政区'), ('am', '澳门特别行政区'), ('hw', '海外')], max_length=10, null=True, verbose_name='家乡')),
                ('introduction', models.CharField(blank=True, default='这位同学很懒，还没有编辑个人简介', max_length=20, null=True, verbose_name='个人简介')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
